/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
  "fmt"
  "math"
)

func main() {
  index := 1
  for ;;index++ {
    triangle := nthTriangle(index)

    divisorCount := countDivisors(triangle)
    if divisorCount > 500 {
      fmt.Printf("%d has %d divisors\n", triangle, divisorCount)
      break
    }
  }
}

func nthTriangle(n int) int {
  return (n * (n+1))/2
}

func countDivisors(number int) int {
  // simple short-circuit
  if number == 1 {
    return 1
  }

  result := 2 // every other number has two divisors

  for divisor := 2; divisor <= int(math.Sqrt(float64(number))); divisor++ {

    if number % divisor != 0 {
      // number is not evenly divisible by divisor
      continue
    }

    if number / divisor == divisor {
      // number is a square, so there's only unique divisor here
      result += 1
    } else {
      result += 2
    }

  }
  return result
}
